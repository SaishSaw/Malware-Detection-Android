import pandas as pd 
import numpy as np
data = pd.read_csv('data.csv',na_values='?')
data.head()
data.Result.value_counts(normalize=True)
null = []
for i in data.columns:
    if data[i].isna().sum() != 0:
        null.append(i)
null 
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import precision_score,recall_score,accuracy_score,f1_score
def evaluate(y_true,pred_y):
    print('The accuracy score is',accuracy_score(y_true,pred_y))
    print('The precision score is',precision_score(y_true,pred_y))
    print('The recall score is',recall_score(y_true,pred_y))
    print('The f1-score is',f1_score(y_true,pred_y))
shuffled_data = data.sample(frac=1,random_state=65)    
X = shuffled_data.drop('Result',axis=1)
Y = shuffled_data['Result']
Xtrain,Xtest,Ytrain,Ytest = train_test_split(X,Y,test_size=0.3,random_state=17)   
rdcf = RandomForestClassifier(criterion='gini',max_depth=11,min_samples_leaf=1,min_samples_split=3,random_state=33)
rdcf.fit(Xtrain,Ytrain)
rdcf_train_pred = rdcf.predict(Xtrain)
rdcf_test_pred = rdcf.predict(Xtest)
print('The metrics for train set is')
evaluate(Ytrain,rdcf_train_pred)
print()
print('The metrics for test set is')
evaluate(Ytest,rdcf_test_pred)
importance = pd.Series(rdcf.feature_importances_,index=X.columns)
rf_best_feat = importance.nlargest(50)
X_Train = Xtrain[rf_best_feat.index]
X_Test = Xtest[rf_best_feat.index]
print(X_Train.shape)
xgb_best = XGBClassifier(random_state=1010)
xgb_best.fit(X_Train,Ytrain)
xgb_train_pred = xgb_best.predict(X_Train)
xgb_test_pred = xgb_best.predict(X_Test)
print('The metrics for train set is')
evaluate(Ytrain,xgb_train_pred)
print('\n')
print('The metrics for test set is')
evaluate(Ytest,xgb_test_pred)  

import pickle
feature_order = X_Train.columns.tolist()
with open('naticus.pkl', 'wb') as file:
    pickle.dump((xgb_best, feature_order), file)